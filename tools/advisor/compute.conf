variables {
  time_window_days = "30"
  top_n_limit = "10"
  credit_round_scale = "3"
}

cache {
  automatic_clustering_history {
    query = "SELECT * FROM snowflake.account_usage.automatic_clustering_history"
  }

  pipe_usage_history {
    query = "SELECT * FROM snowflake.account_usage.pipe_usage_history"
  }
  
  query_history {
    query = "SELECT * FROM snowflake.account_usage.query_history"
  }

  show_warehouses_in_account {
    query = "SHOW WAREHOUSES IN ACCOUNT"
  }

  show_resource_monitors_in_account {
    query = "SHOW RESOURCE MONITORS IN ACCOUNT"
  }
 
  warehouse_events_history {
    query = "SELECT * FROM snowflake.account_usage.warehouse_events_history"
  }
  
  warehouse_metering_history {
    query = "SELECT * FROM snowflake.account_usage.warehouse_metering_history"
  }

  warehouse_spilling_to_disk {
    query = """
               SELECT
                 DATE_TRUNC('day', START_TIME) as "Date",
                 WAREHOUSE_NAME,
                 CASE WHEN warehouse_size = 'X-Small'    THEN 1
                  WHEN warehouse_size = 'Small'      THEN 2
                  WHEN warehouse_size = 'Medium'     THEN 4
                  WHEN warehouse_size = 'Large'      THEN 8
                  WHEN warehouse_size = 'X-Large'    THEN 16
                  WHEN warehouse_size = '2X-Large'   THEN 32
                  WHEN warehouse_size = '3X-Large'   THEN 64
                  WHEN warehouse_size = '4X-Large'   THEN 128
                  WHEN warehouse_size = '5X-Large'    THEN 256
                  WHEN warehouse_size = '6X-Large'    THEN 512
                  ELSE 1
                 END as warehouse_size_nodes,
                 COUNT(QUERY_ID) as query_count,
                 SUM(BYTES_SPILLED_TO_LOCAL_STORAGE) / POWER(1024,3) / warehouse_size_nodes as "Local Spillage GB",
                 SUM(BYTES_SPILLED_TO_REMOTE_STORAGE) / POWER(1024,3) / warehouse_size_nodes as "Remote Spillage GB"
               FROM
                 snowflake.account_usage.query_history
               WHERE
                 start_time >= dateadd(DAY, -{{ time_window_days }}, current_date())
                 AND (BYTES_SPILLED_TO_LOCAL_STORAGE+BYTES_SPILLED_TO_REMOTE_STORAGE) > 0
               GROUP BY 1,2,3;
    """
  }
}

checks {
  "Warehouse credits by day" {
    description = "Warehouse consumption every day for the past {{ time_window_days }} days"
    query = """WITH warehouse_credits AS (
                 SELECT
                   TO_DATE(start_time) AS date,
                   SUM(credits_used_compute) AS credits_used_compute,
                   SUM(credits_used_cloud_services) AS credits_used_cs,
                   SUM(credits_used_compute) * 0.1 AS free_cloud_cs_credits
                 FROM
                   warehouse_metering_history
                 WHERE
                   start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                 GROUP BY
                   1
               )
               SELECT
                 date AS "Date",
                 ROUND(
                   credits_used_compute + credits_used_cs - LEAST(credits_used_cs, free_cloud_cs_credits),
                   {{ credit_round_scale }}
                 ) AS "Warehouse Credits"
               FROM
                 warehouse_credits
               ORDER BY
                 1 DESC
               LIMIT
                 {{ time_window_days }};"""
    cache = warehouse_metering_history
    severity = INFO
    tags = [COMPUTE, WAREHOUSE]
    graph = {
        title = "Warehouse credits by day",
        type = "area",
        x = { field = "Date", type = "temporal", timeUnit = "yearmonthdate", labels = "true" }
        y = { field = "Warehouse Credits", type = "quantitative", labels = "true" }
      }
  }

  "Snowpipe credits total" {
    description = "Snowpipe credit consumption total over the past {{ time_window_days }} days"
    query = """SELECT
                 ROUND(SUM(credits_used), {{ credit_round_scale }}) AS "Snowpipe Credits"
               FROM
                 pipe_usage_history
               WHERE
                 start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP());"""
    cache = pipe_usage_history
    severity = INFO
    tags = [COMPUTE, PIPE]
  }

  "Snowpipe credits by day" {
    description = "Snowpipe credit consumption every day for the past {{ time_window_days }} days"
    query = """SELECT
                 TO_DATE(start_time) AS "Date",
                 ROUND(SUM(credits_used), {{ credit_round_scale }}) AS "Snowpipe Credits"
               FROM
                 pipe_usage_history
               WHERE
                 start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 1
               ORDER BY
                 1 DESC
               LIMIT
                 {{ time_window_days }};"""
    cache = pipe_usage_history
    severity = INFO
    tags = [COMPUTE, PIPE]
    graph = {
            title = "Snowpipe credits by day",
            type = "area",
            x = { field = "Date", type = "temporal", timeUnit = "yearmonthdate", labels = "true" }
            y = { field = "Snowpipe Credits", type = "quantitative", labels = "true" }
          }
  }

  "Automatic clustering credits total" {
    description = "Automatic clustering credit consumption total over the past {{ time_window_days }} days"
    query = """SELECT
                 ROUND(SUM(credits_used), {{ credit_round_scale }}) AS "Automatic Clustering Credits"
               FROM
                 automatic_clustering_history
               WHERE
                 start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP());"""
    cache = automatic_clustering_history
    severity = INFO
    tags = [COMPUTE, CLUSTERING]
  }

  "Automatic clustering credits by day" {
    description = "Automatic clustering credit consumption every day for the past {{ time_window_days }} days"
    query = """SELECT
                 TO_DATE(start_time) AS "Date",
                 ROUND(SUM(credits_used), {{ credit_round_scale }}) AS "Automatic Clustering Credits"
               FROM
                 automatic_clustering_history
               WHERE
                 start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 1
               ORDER BY
                 1 DESC
               LIMIT
                 {{ time_window_days }};"""
    cache = automatic_clustering_history
    severity = INFO
    tags = [COMPUTE, CLUSTERING]
    graph = {
            title = "Automatic clustering credits by day",
            type = "area",
            x = { field = "Date", type = "temporal", timeUnit = "yearmonthdate", labels = "true" }
            y = { field = "Automatic Clustering Credits", type = "quantitative", labels = "true" }
          }
  }

  "Query acceleration credits by warehouse" = {
    description = "Query acceleration credits used by warehouses in the last {{ time_window_days }} days"
    severity = INFO
    query = """SELECT
                 warehouse_name AS "Warehouse Name",
                 ROUND(SUM(credits_used), {{ credit_round_scale }}) AS "Query Acceleration Credits"
               FROM
                 snowflake.account_usage.query_acceleration_history
               WHERE
                 start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 1
               ORDER BY
                 2 DESC;"""
    tags = [COMPUTE]
    graph = {
            title = "Query acceleration credits by warehouse",
            type = "bar",
            x = { field = "Warehouse Name", type = "ordinal", labels = "true", sort = YDESC },
            y = { field =  "Query Acceleration Credits", type =  "quantitative", labels = "true" }
          }
  }

   "Warehouses consuming the most credits" {
      description = "The top {{ top_n_limit }} warehouses using the most credits in the last {{ time_window_days }} days"
      query = """SELECT
                   warehouse_name AS "Warehouse Name",
                   ROUND(SUM(credits_used_compute), {{ credit_round_scale }}) AS "Warehouse Credits"
                 FROM
                   warehouse_metering_history
                 WHERE
                   start_time >= DATEADD(DAY, - {{ time_window_days }}, CURRENT_TIMESTAMP())
                   AND credits_used > 0
                 GROUP BY
                   1
                 ORDER BY
                   2 DESC
                 LIMIT
                   {{ top_n_limit }};"""
      cache = warehouse_metering_history
      severity = INFO
      tags = [COMPUTE, WAREHOUSE]
      graph = {
        title = "Warehouses consuming the most credits",
        type = "bar",
        x = { field = "Warehouse Name", type = "ordinal", labels = "true", sort = YDESC },
        y = { field =  "Warehouse Credits", type =  "quantitative", labels = "true" }
      }
    }

  "Warehouses that are idle" {
    description = "Warehouses that have been idle for the last {{ time_window_days }} days"
    query = """WITH wh_events AS (
                 SELECT
                   warehouse_name,
                   MAX(timestamp) AS LAST_USED_DATE
                 FROM
                   warehouse_events_history
                 WHERE
                   warehouse_id NOT IN (
                     SELECT
                       DISTINCT warehouse_id
                     FROM
                       warehouse_events_history
                     WHERE
                       event_name = 'DROP_WAREHOUSE'
                   )
                   AND event_name IN (
                     'CREATE_WAREHOUSE',
                     'RESUME_CLUSTER',
                     'RESUME_WAREHOUSE'
                   )
                 GROUP BY
                   warehouse_name
               )
               SELECT
                 warehouse_name AS "Warehouse Name",
                 last_used_date AS "Last Used Date",
                 DATEDIFF(DAY, last_used_date, CURRENT_TIMESTAMP()) AS "Idle Days"
               FROM
                 wh_events
               WHERE
                 "Idle Days" >= {{ time_window_days }}
               ORDER BY
                 "Last Used Date";"""
    cache = warehouse_events_history
    severity = INFO
    tags = [COMPUTE, WAREHOUSE]
    graph = {
          title = "Warehouses that are idle",
          type = "bar",
          x = { field = "Warehouse Name", type = "ordinal", labels = "true", sort = YDESC },
          y = { field =  "Idle Days", type =  "quantitative", labels = "true" }
        }
  }

  "Warehouses that are oversized" {
    description = """Warehouses that could be oversized based on having a Query Load Percentage = 100
                   and a Utilized Query Count Percentage < 100 for the last {{ time_window_days }} days"""
    query = """WITH wh_buckets AS (
                 SELECT
                   warehouse_name AS warehouse_name,
                   warehouse_size AS warehouse_size,
                   CASE
                     WHEN query_load_percent BETWEEN 0 AND 10 THEN 10
                     WHEN query_load_percent BETWEEN 10 AND 20 THEN 20
                     WHEN query_load_percent BETWEEN 20 AND 30 THEN 30
                     WHEN query_load_percent BETWEEN 30 AND 40 THEN 40
                     WHEN query_load_percent BETWEEN 40 AND 50 THEN 50
                     WHEN query_load_percent BETWEEN 50 AND 60 THEN 60
                     WHEN query_load_percent BETWEEN 60 AND 70 THEN 70
                     WHEN query_load_percent BETWEEN 70 AND 80 THEN 80
                     WHEN query_load_percent BETWEEN 80 AND 90 THEN 90
                     WHEN query_load_percent BETWEEN 90 AND 100 THEN 100
                   END query_load_percent_bucket
                 FROM
                   query_history
                 WHERE
                   start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                   AND query_load_percent IS NOT NULL
               ),
               wh_buckets_pct AS (
                 SELECT
                   warehouse_name,
                   warehouse_size,
                   query_load_percent_bucket,
                   COUNT(*) AS utilized_query_count,
                   ROUND(
                     RATIO_TO_REPORT(COUNT(*)) OVER (PARTITION BY warehouse_name) * 100
                   ) AS utilized_query_count_pct
                 FROM
                   wh_buckets
                 GROUP BY
                   warehouse_name,
                   warehouse_size,
                   query_load_percent_bucket
               )
               SELECT
                 warehouse_name AS "Warehouse Name",
                 warehouse_size AS "Warehouse Size",
                 query_load_percent_bucket AS "Query Load Percentage",
                 utilized_query_count AS "Utilized Query Count",
                 utilized_query_count_pct AS "Utilized Query Count Percentage"
               FROM
                 wh_buckets_pct
               WHERE
                 query_load_percent_bucket = 100
                 AND utilized_query_count_pct < 100;""",
    cache = query_history
    severity = INFO
    tags = [COMPUTE, WAREHOUSE]
    graph = {
      title = "Warehouses that are oversize",
      type = "bar",
      x = { field = "Warehouse Name", type = "ordinal", labels = "true", sort = YDESC },
      y = { field = "Utilized Query Count Percentage", type = "quantitative", labels = "true" }
    }
  }

  "Warehouses without auto_suspend/auto_resume" = {
    description = """Warehouses not set to AUTO_RESUME or AUTO_SUSPEND will not suspend when not in use and
                     not start automatically when needed leading to wasted credits"""
    query = """SELECT
                 "name" AS "Warehouse Name",
                 "auto_resume" AS "Auto Resume",
                 "auto_suspend" AS "Auto Suspend",
                 "resumed_on" AS "Resumed On"
               FROM
                 show_warehouses_in_account
               WHERE
                 "auto_resume" = 'false'
                 OR "auto_suspend" = 0
                 OR "auto_suspend" IS null;"""
    cache = show_warehouses_in_account
    severity = MAJOR
    tags = [COMPUTE, WAREHOUSE]
  }

  "Warehouses without a resource monitor" = {
    description = """Warehouses without a resource monitor. Every warehouse should have a resource monitor to prevent
                   unexpected cost overruns"""
    query = """SELECT
                 "name" AS "Warehouse Name"
               FROM
                 show_warehouses_in_account
               WHERE
                 "resource_monitor" = 'null';"""
    cache = show_warehouses_in_account
    severity = CRITICAL
    tags = [COMPUTE, WAREHOUSE]
  }

  "Cloud services over 10% days" = {
    description = """Days cloud services ratio is greater than 10% in the past {{ time_window_days }} days.
                     Usage for cloud services is charged only if the daily consumption of cloud services exceeds 10%
                     of the daily usage of virtual warehouses"""
    query = """WITH days AS (
                 SELECT
                   DATE(end_time) AS date,
                   SUM(credits_used_compute) AS credits_used_compute,
                   SUM(credits_used_cloud_services) AS credits_used_cloud_services,
                   SUM(credits_used_compute) * 0.1 AS ten_percent
                 FROM
                   warehouse_metering_history
                 WHERE
                   end_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                 GROUP BY
                   date
               )
               SELECT
                 date AS "Date",
                 ROUND(credits_used_compute, {{ credit_round_scale }}) AS "Credits Used Compute",
                 ROUND(
                   credits_used_cloud_services,
                   {{ credit_round_scale }}
                 ) AS "Credits Used Cloud Services",
                 ROUND(ten_percent, {{ credit_round_scale }}) AS "10% of Credits Used Compute"
               FROM
                 days
               WHERE
                 "Credits Used Cloud Services" > "10% of Credits Used Compute"
               ORDER BY
                 1 DESC;"""
    cache = warehouse_metering_history
    severity = INFO
    tags = [COMPUTE]
    graph = {
        title = "Cloud services over 10% days",
        type = "bar",
        x = { field = "Date", type = "temporal", timeUnit = "yearmonthdate", labels = "true" }
        y = { field = "Credits Used Cloud Services", type = "quantitative", labels = "true" }
      }
  }

  "Warehouse queue stats" {
    description = "Number of queued queries, longest queue, and average per warehouse in the past {{ time_window_days }} days"
    query = """SELECT
                 warehouse_name AS "Warehouse Name",
                 COUNT(*) AS "Queued Count",
                 ROUND(MAX(avg_queued_load), 5) AS "Queued Load Max",
                 ROUND(MAX(avg_queued_provisioning), 5) AS "Queued Provisioning Max",
                 ROUND(AVG(avg_queued_load), 5) AS "Queued Load Avg",
                 ROUND(AVG(avg_queued_provisioning), 5) AS "Queued Provisioning Avg"
               FROM
                 snowflake.account_usage.warehouse_load_history
               WHERE
                 start_time >= DATEADD(DAY, - {{ time_window_days }}, CURRENT_TIMESTAMP())
                 AND avg_queued_load > 0
               GROUP BY
                 warehouse_name
               ORDER BY
                 2 DESC;"""
    severity = INFO
    tags = [COMPUTE, WAREHOUSE]
    graph = {
          title = "Warehouse queue stats",
          type = "bar",
          x = { field = "Warehouse Name", type = "ordinal", labels = "true", sort = YDESC },
          y = { field = "Queued Count", type = "quantitative", labels = "true" }
        }
  }

  "Warehouses spilling to remote disk" {
    description = "Warehouses spilling to remote disk in the last {{ time_window_days }} days"
    query = """SELECT
                 "Date",
                 "Remote Spillage GB"
               FROM
                 warehouse_spilling_to_disk
               WHERE
                 "Remote Spillage GB" != 0
               ORDER BY
                 "Remote Spillage GB" DESC;"""
    cache = warehouse_spilling_to_disk
    severity = INFO
    tags = [COMPUTE, WAREHOUSE]
    graph = {
      "title": "Warehouses spilling to remote disk",
      "type": "BAR",
      "x": {
        "field": "Date",
        "type": "temporal",
        "labels": true,
        "sort": "YDESC",
        "timeUnit": "yearmonthdate"
      },
      "y": {
        "field": "Remote Spillage GB",
        "type": "QUANTITATIVE",
        "labels": true,
      }
    }
  }

  "Warehouses spilling to local disk" {
    description = "Warehouses spilling to local disk in the last {{ time_window_days }} days"
    query = """SELECT
                 "Date",
                 "Local Spillage GB"
               FROM
                 warehouse_spilling_to_disk
               WHERE
                 "Local Spillage GB" != 0
               ORDER BY
                 "Local Spillage GB" DESC;"""
    cache = warehouse_spilling_to_disk
    severity = INFO
    tags = [COMPUTE, WAREHOUSE]
    graph = {
      "title": "Warehouses spilling to local disk",
      "type": "BAR",
      "x": {
        "field": "Date",
        "type": "temporal",
        "labels": true,
        "sort": "YDESC",
        "timeUnit": "yearmonthdate"
      },
      "y": {
        "field": "Local Spillage GB",
        "type": "QUANTITATIVE",
        "labels": true,
      }
    }
  }

  "Triggered resource monitors" {
    description = "Resource monitors that have suspended a warehouse in the last {{ time_window_days }} days"
    query = """SELECT
                 warehouse_name AS "Warehouse Name",
                 COUNT(*) AS "Suspend Count"
               FROM
                 warehouse_events_history
               WHERE
                 timestamp >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                 AND event_name = 'SUSPEND_CLUSTER'
                 AND event_reason = 'RESOURCE_MONITOR_SUSPEND'
               GROUP BY
                 1
               ORDER BY
                 2 DESC;"""
    cache = warehouse_events_history
    severity = CRITICAL
    tags = [COMPUTE, WAREHOUSE]
    graph = {
              title = "Triggered resource monitors",
              type = "bar",
              x = { field = "Warehouse Name", type = "ordinal", labels = "true", sort = YDESC },
              y = { field = "Suspend Count", type = "quantitative", labels = "true" }
            }
  }

  "Queries using the most credits" {
    description = "The top 100 queries using the most credits in the last {{ time_window_days }} days"
    query = """WITH queries AS (
                 SELECT
                   *,
                   CASE
                     WHEN warehouse_size = 'X-Small' THEN 1
                     WHEN warehouse_size = 'Small' THEN 2
                     WHEN warehouse_size = 'Medium' THEN 4
                     WHEN warehouse_size = 'Large' THEN 8
                     WHEN warehouse_size = 'X-Large' THEN 16
                     WHEN warehouse_size = '2X-Large' THEN 32
                     WHEN warehouse_size = '3X-Large' THEN 64
                     WHEN warehouse_size = '4X-Large' THEN 128
                     WHEN warehouse_size = '5X-Large' THEN 256
                     WHEN warehouse_size = '6X-Large' THEN 512
                     ELSE 1
                   END credit_unit
                 FROM
                   query_history
               )
               SELECT
                 query_id AS "Query ID",
                 warehouse_name AS "Warehouse Name",
                 warehouse_type AS "Warehouse Size",
                 start_time AS "Start Time",
                 ROUND(total_elapsed_time / 1000, 2) AS "Total Elapsed Seconds",
                 ROUND(
                   credit_unit * ("Total Elapsed Seconds" / 60 / 60),
                   {{ credit_round_scale }}
                 ) AS "Total Credit"
               FROM
                 queries
               WHERE
                 start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                 AND "Warehouse Size" IS NOT NULL
                 AND (
                   error_message IS NULL
                   OR error_code = 604
                 )
               ORDER BY
                 "Total Credit" DESC
               LIMIT
                 100;""",
    cache = query_history
    severity = INFO
    tags = [COMPUTE, QUERY]
    graph = {
          title = "Queries using the most credits",
          type = "bar",
          x = { field = "Query ID", type = "ordinal", labels = "false", sort = YDESC },
          y = { field = "Total Credit", type = "quantitative", labels = "true" }
        }
  }

  "Different warehouses for COPY INTO and SELECT statements" = {
    description = "Prevent contention between data load and data transformation."
    query = """SELECT
                 DISTINCT warehouse_name AS "Warehouse Name"
               FROM
                 query_history
               WHERE
                 warehouse_name IS NOT NULL
                 AND CONTAINS(UPPER(query_text), 'COPY INTO')
                 AND start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               INTERSECT
               SELECT
                 DISTINCT warehouse_name AS "Warehouse Name"
               FROM
                 query_history
               WHERE
                 warehouse_name IS NOT NULL
                 AND CONTAINS(UPPER(query_text), 'SELECT')
                 AND start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP());"""
    cache = query_history
    severity = MAJOR
    tags = [COMPUTE]
  }

  "Compute credits used in external tables" = {
    description = "External table credits consumption in the past 14 days."
    query = """SELECT
                 object_name AS "Table Name",
                 SUM(credits_used) AS "Credits Used",
                 SUM(files_registered) AS "Total Files Registered"
               FROM
                 TABLE(
                   snowflake.information_schema.auto_refresh_registration_history(
                     DATE_RANGE_START => DATEADD(DAY, -14, CURRENT_TIMESTAMP()),
                     OBJECT_TYPE => 'external_table'
                   )
                 )
               GROUP BY
                 "Table Name";"""
    severity = INFO
    tags = [COMPUTE]
    graph: {
      "title": "Compute credits used in external tables",
      "type": "bar",
      "x": {
        "field": "Table Name",
        "type": "ordinal",
        "labels": true,
        "sort": "XDESC"
      },
      "y": {
        "field": "Credits Used",
        "type": "ordinal",
        "labels": false,
      }
    }
  }
  
  "Materialized view using the most credits" {
    description = """Refreshing materialized views consumes warehouse credits, this check will show the sum for each materialized view in the past {{ time_window_days }}"""
    query = """SELECT
                 table_name AS "Table Name",
                 schema_name AS "Schema Name",
                 database_name AS "Database Name",
                 SUM(credits_used) AS "Total Credits Used"
               FROM
                 snowflake.account_usage.materialized_view_refresh_history
               WHERE
                 start_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 table_name,
                 schema_name,
                 database_name
               ORDER BY
                 "Total Credits Used" DESC;"""
    graph = {
        title = "Materialized View Credits",
        type = "bar",
        x = { field = "Total Credits Used", type = "ordinal", labels = "true", sort = YDESC },
        y = { field = "Table Name", type = "quantitative", labels = "true" }
    }
    severity = INFO
    tags = [COMPUTE, MATERIALIZEDVIEWS]
    }

  "Account level resource monitor" {
    description = "An account level resource monitor should be set to suspend or after overall credit limit is reached."
    query = """SELECT
                 'Account Level Resource Monitor Not Found' AS "Status"
               WHERE
                 NOT EXISTS (
                   SELECT
                     1
                   FROM
                     show_resource_monitors_in_account
                   WHERE
                     "level" = 'ACCOUNT'
                 )
                 OR EXISTS (
                   SELECT
                     1
                   FROM
                     show_resource_monitors_in_account
                   WHERE
                     "level" = 'ACCOUNT'
                     AND (
                       "credit_quota" IS NULL
                       OR "start_time" > CURRENT_TIMESTAMP()
                     )
                 );"""
    cache = show_resource_monitors_in_account
    severity = MAJOR
    tags = [COMPUTE]
  }
  
  "Warehouses with high auto-suspend time" {
    description = """Evaluate warehouses in the past {{ time_window_days }} days based on their auto-suspend settings. If a warehouse handles frequent short queries with an average elapsed time below 10% of 
                    auto-suspend duration, we recommends assessing the auto-suspend setting."""
    query = """
             WITH WarehouseInfo AS (
                SELECT "name", "auto_suspend" FROM show_warehouses_in_account
              ),
              QueryInfo AS (
                SELECT
                    warehouse_name,
                    AVG(ROUND(total_elapsed_time / 1000, 2)) AS avg_elapsed_time,
                    COUNT(*) AS query_count
                FROM
                    snowflake.account_usage.query_history
                WHERE
                    end_time >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP()) 
                GROUP BY
                    warehouse_name
              )
              SELECT
                wi."name" AS "Warehouse Name",
                qi.query_count AS "Query Count",
                wi."auto_suspend" AS "Auto Suspend Seconds",
                qi.avg_elapsed_time AS "Average Elapsed Time Seconds"
              FROM
                WarehouseInfo wi
              LEFT JOIN
                QueryInfo qi ON wi."name" = qi.warehouse_name
              WHERE 
                qi.avg_elapsed_time * 10 < wi."auto_suspend"  AND qi.query_count > 1000 
              GROUP BY
                wi."name", wi."auto_suspend", qi.avg_elapsed_time, qi.query_count
              ORDER BY 
                ("Auto Suspend Seconds" - "Average Elapsed Time Seconds") DESC;"""
    cache = show_warehouses_in_account
    severity = INFO
    tags = [COMPUTE]
  }
  
  "Query patterning" {
    description = """Provides insights into performance and credit consumption of parameterized queries in the Snowflake account over the past {{ time_window_days }} days.
                    It categorizes the analysis by both unique query identifiers (query_parameterized_hash) and the warehouse sizes."""
    query = """
              WITH
                queries AS (
                  SELECT
                    *,
                    CASE
                      WHEN warehouse_size = 'X-Small' THEN 1
                      WHEN warehouse_size = 'Small' THEN 2
                      WHEN warehouse_size = 'Medium' THEN 4
                      WHEN warehouse_size = 'Large' THEN 8
                      WHEN warehouse_size = 'X-Large' THEN 16
                      WHEN warehouse_size = '2X-Large' THEN 32
                      WHEN warehouse_size = '3X-Large' THEN 64
                      WHEN warehouse_size = '4X-Large' THEN 128
                      WHEN warehouse_size = '5X-Large' THEN 256
                      WHEN warehouse_size = '6X-Large' THEN 512
                      ELSE 1
                    END AS credit_unit
                  FROM
                    query_history
                  WHERE
                    end_time >= DATEADD ('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                    AND query_parameterized_hash IS NOT NULL
                )
              SELECT
                query_parameterized_hash,
                COALESCE(warehouse_name, 'No warehouse') AS "Warehouse Name",
                warehouse_size AS "Warehouse Size",
                COUNT(*) AS "Total Runs",
                AVG(ROUND(total_elapsed_time / 1000, 2)) AS "Average Elapsed Seconds",
                SUM(
                    ROUND(credit_unit * (total_elapsed_time / 3600000), {{ credit_round_scale }})
                  ) as "Total Credits",
                ROUND( "Total Credits" / "Total Runs", {{ credit_round_scale }}) AS "Credits per Run"
              FROM
                queries
              GROUP BY
                query_parameterized_hash,
                warehouse_size,
                warehouse_name
              ORDER BY
                "Total Credits" DESC;"""
    cache = query_history
    severity = INFO
    tags = [COMPUTE]
    graph = {
      title = "Query patterning",
      type = "bar",
      x = { field = "Warehouse Name", type = "ordinal", labels = "true", sort = YDESC },
      y = { field = "Total Credits", type = "quantitative", labels = "true" }
    }
  }
}
