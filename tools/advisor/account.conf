cache {
  show_parameters_in_account {
    query = "SHOW PARAMETERS IN ACCOUNT"
  }
}

checks {
  "Account information" = {
    description = "Snowflake account information."
    query = """SELECT
                 CASE
                   WHEN key = 'accountAlias' THEN 'Account Alias'
                   WHEN key = 'currentDeploymentLocation' THEN 'Current Deployment Location'
                   WHEN key = 'orgName' THEN 'Org Name'
                   WHEN key = 'serviceLevelName' THEN 'Service Level Name'
                   WHEN key = 'region' THEN 'Region'
                 END AS "Key",
                 value :: STRING AS "Value"
               FROM
                 TABLE(
                   FLATTEN(
                     PARSE_JSON(SYSTEM$BOOTSTRAP_DATA_REQUEST()) :accountInfo
                   )
                 ) INFO
               WHERE
                 key IN (
                   'accountAlias',
                   'currentDeploymentLocation',
                   'orgName',
                   'serviceLevelName',
                   'region'
                 )
               UNION
               SELECT
                 'Current User', CURRENT_USER()
               UNION
               SELECT
                 'Current Account', CURRENT_ACCOUNT()
               UNION
               SELECT
                 'Current Version', CURRENT_VERSION();"""
    severity = INFO
    tags = [ACCOUNT]
  }

  "Account parameter ABORT_DETACHED_QUERY" = {
    description = "Long running queries should be cancelled by terminating the application that started the query. If needed, this setting may still be used at the session level. See: https://docs.snowflake.com/en/sql-reference/parameters#abort-detached-query"
    severity = MAJOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'ABORT_DETACHED_QUERY' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter ALLOW_CLIENT_MFA_CACHING" = {
    description = "Allow re-use of MFA tokens on individual sessions when using Snowflake clients, so the MFA doesn't have to be followed on each client invocation. See: https://docs.snowflake.com/en/sql-reference/parameters#allow-client-mfa-caching"
    severity = MINOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'ALLOW_CLIENT_MFA_CACHING' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter ALLOW_ID_TOKEN" = {
    description = "Use a token enable client connection caching with SSO. Without this, each invocation of the client will require additional authentication. See: https://docs.snowflake.com/en/sql-reference/parameters#allow-id-token"
    severity = MINOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'ALLOW_ID_TOKEN' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS" = {
    description = """When this setting is disabled, Snowflake does not log detailed statement parameters in the query logs.
                     This precaution is essential for preventing the unintentional exposure of sensitive data,
                     such as personal identifiers or confidential business information, which might be included in SQL
                     statement parameters.
                     By disabling this, you strengthen data privacy and compliance with data
                     protection regulations, ensuring that potentially sensitive details are not stored in accessible logs.
                     See: https://docs.snowflake.com/en/sql-reference/parameters#client-enable-log-info-statement-parameters"""
    severity = CRITICAL
    tags = [ACCOUNT, SECURITY]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS' AND "value" = true;"""
    cache = show_parameters_in_account
  }

  "Account parameter DATA_RETENTION_TIME_IN_DAYS" = {
    description = "Some amount of Time Travel should be enabled by default to allow for data recovery after accidental modification."
    severity = CRITICAL
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'DATA_RETENTION_TIME_IN_DAYS' AND "value" = 0;"""
    cache = show_parameters_in_account
  }

  "Account parameter ERROR_ON_NONDETERMINISTIC_MERGE" = {
    description = "If a record is set to be updated multiple times or updated and deleted in a MERGE statement, throw an error. If this is not enable, some records might be duplicated. See: https://docs.snowflake.com/en/sql-reference/parameters#error-on-nondeterministic-merge"
    severity = MAJOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'ERROR_ON_NONDETERMINISTIC_MERGE' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter MAX_DATA_EXTENSION_TIME_IN_DAYS" = {
    description = "Allow some data retention days extension to prevent streams from going stale. If this setting is too small, a stream may never be consumed before it expires. See: https://docs.snowflake.com/en/sql-reference/parameters#max-data-extension-time-in-days"
    severity = MAJOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'MAX_DATA_EXTENSION_TIME_IN_DAYS' AND "value" = 0;"""
    cache = show_parameters_in_account
  }

  "Account parameter NETWORK_POLICY" = {
    description = "To deter malicious actors, customers should attempt to define the expected source IP ranges for Snowflake access as an account-wide policy."
    severity = CRITICAL
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'NETWORK_POLICY' AND "value" IN ('', NULL);"""
    cache = show_parameters_in_account
  }

  "Account parameter PREVENT_UNLOAD_TO_INLINE_URL" = {
    description = """This configuration prevents users from unloading data directly to inline URLs, which can be a
                     significant security risk. Inline URLs, unlike controlled storage destinations, may not have the
                     same level of security and can expose data to potential interception or unauthorized access.
                     Additionally, they could contain access settings directly in the statement or URL.
                     Enabling this setting ensures that data unloading operations are restricted to secure,
                     authenticated storage locations.
                     See: https://docs.snowflake.com/en/sql-reference/parameters#prevent-unload-to-inline-url"""
    severity = MAJOR
    tags = [ACCOUNT, SECURITY]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'PREVENT_UNLOAD_TO_INLINE_URL' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION" = {
    description = """This configuration mandates the use of storage integrations when creating external stages,
                     ensuring that data is transferred and stored in a secure and controlled environment. Storage
                     integrations provide a layer of security by managing and centralizing storage credentials rather
                     than embedding them in stage definitions.
                     This approach not only enhances security by abstracting access details away from the end users but
                     also streamlines credential management and ensures adherence to organizational policies and
                     compliance standards.
                     See: https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-creation"""
    severity = MAJOR
    tags = [ACCOUNT, SECURITY]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION" = {
    description = """This configuration mandates the use of storage integrations when operating on external stages,
                     ensuring that data is transferred and stored in a secure and controlled environment. Storage
                     integrations provide a layer of security by managing and centralizing storage credentials rather
                     than embedding them in stage definitions.
                     This approach not only enhances security by abstracting access details away from the end users but
                     also streamlines credential management and ensures adherence to organizational policies and
                     compliance standards.
                     See: https://docs.snowflake.com/en/sql-reference/parameters#require-storage-integration-for-stage-operation"""
    severity = MAJOR
    tags = [ACCOUNT, SECURITY]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter STATEMENT_QUEUED_TIMEOUT_IN_SECONDS" = {
    description = "Allow queries to complete eventually. The ideal value is to be established on a per project/customer basis. See: https://docs.snowflake.com/en/sql-reference/parameters#statement-queued-timeout-in-seconds"
    severity = MAJOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'STATEMENT_QUEUED_TIMEOUT_IN_SECONDS' and "value" = 0;"""
    cache = show_parameters_in_account
  }

  "Account parameter STATEMENT_TIMEOUT_IN_SECONDS" = {
    description = "Queries should not be allowed to run forever (at most 2 days or 172800 seconds, the Snowflake default) but large or complex queries should be given enough time to complete (at least 6 hours or 21600 seconds). This setting should be customized for client needs or overridden at the session level."
    severity = MAJOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'STATEMENT_TIMEOUT_IN_SECONDS' AND ("value" < 21600 OR "value" >= 172800);"""
    cache = show_parameters_in_account
  }

  "Account parameter TIMEZONE" = {
    description = "Setting a timezone of UTC and allowing applications to fine tune the timezone they present at runtime can minimize surprises for application integrations that needs to make time calculations."
    severity = MAJOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'TIMEZONE' AND "value" NOT IN ('UTC', 'Etc/UTC');"""
    cache = show_parameters_in_account
  }

  "Account parameter TRANSACTION_ABORT_ON_ERROR" = {
    description = "In a failure scenario the transacation should be aborted, because the client might not be trustworthy enough to rollback their transaction. Application code that handles this properly can override this setting at the session level."
    severity = MINOR
    tags = [ACCOUNT]
    query = """SELECT
                 "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'TRANSACTION_ABORT_ON_ERROR' AND "value" = false;"""
    cache = show_parameters_in_account
  }

  "Account parameter EVENT_TABLE" = {
      description = """Event tables are used for storage of log and trace event data from functions and procedures. To enable logging or tracing,
                       an event table must be configured to collect the message and event data generated by handler code.
                       See: https://docs.snowflake.com/en/developer-guide/logging-tracing/event-table-setting-up#associate-the-event-table-with-the-account"""
      severity = MINOR
      tags = [ACCOUNT]
      query = """SELECT
                   "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
                 FROM
                   show_parameters_in_account
                 WHERE
                   "key" = 'EVENT_TABLE' AND "value" = '';"""
      cache = show_parameters_in_account
    }
  
  "Account parameter SUSPEND_TASK_AFTER_NUM_FAILURES" = {
      description = """Number of consecutive failed task runs after which a standalone task or DAG root task is suspended automatically. The default value is 10, and setting it to 0 disables auto-suspending.
                       Disabling suspend after task failure is not recommended because extra compute will be used for a tasks that are not creating a usable result.
                       See: https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures"""
      severity = MAJOR
      tags = [ACCOUNT]
      query = """SELECT
                   "key" AS "Parameter", "value" AS "Value", "default" AS "Default"
                 FROM
                   show_parameters_in_account
                 WHERE
                     "key" = 'SUSPEND_TASK_AFTER_NUM_FAILURES' AND "value" = '0';"""
      cache = show_parameters_in_account
    }
}
