variables {
  time_window_days = "30"
}

cache {
  show_users {
    query = "SHOW USERS"
  }

  show_security_integrations {
    query = "SHOW SECURITY INTEGRATIONS"
  }

  grants_to_roles {
    query = "SELECT * FROM snowflake.account_usage.grants_to_roles WHERE deleted_on IS NULL"
  }

  grants_to_users {
    query = "SELECT * FROM snowflake.account_usage.grants_to_users WHERE deleted_on IS NULL"
  }

  roles {
    query = "SELECT * FROM snowflake.account_usage.roles WHERE deleted_on IS NULL"
  }

  show_parameters_in_account {
    query = "SHOW PARAMETERS IN ACCOUNT"
  }
}

checks {
  "Logins blocked by IP" = {
    description = "Login attempts blocked by network policies. Excessive blocked login attempts can be a sign of malicious actors."
    query = """SELECT
                 DISTINCT user_name AS "User Name",
                 client_ip AS "IP Address",
                 error_message AS "Error Message"
               FROM
                 snowflake.account_usage.login_history
               WHERE
                 event_timestamp >= DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                 AND is_success <> 'YES'
                 AND error_message = 'INCOMING_IP_BLOCKED';"""
    severity = MAJOR
    tags = [SECURITY, LOGIN]
  }

  "Users with password" = {
    description = "Users with a password set. Passwords can be insecure; SSO or private keys are preferred."
    query = """SELECT
                 LEFT("name", 3) || RPAD('*', LENGTH("name") - 3, '*') AS "User Name",
                 "default_role" AS "Default Role",
                 "has_rsa_public_key" AS "Has Public Key"
               FROM
                 show_users
               WHERE
                 "has_password" = TRUE;"""
    severity = MINOR
    cache = show_users
    tags = [SECURITY, LOGIN]
  }

  "SSO enabled" = {
    description = """Enabling a Single Sign-On (SSO) solution is a security best practice.
                     SSO simplifies credential management for IT and reduces the number of login methods for users.
                     See: https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-overview"""
    query = """SELECT
                 *
               WHERE
                 NOT EXISTS (
                   SELECT
                     *
                   FROM
                     show_security_integrations
                   WHERE
                     (
                       CONTAINS("type", 'SCIM')
                       OR CONTAINS("type", 'SAML2')
                     )
                     AND "enabled" = true
                 );"""
    severity = MAJOR
    cache = show_security_integrations
    tags = [SECURITY, LOGIN]
  }

  "Periodic rekeying enabled" = {
    description = """This feature periodically changes the encryption keys used to secure your data, reducing the risk
                     of unauthorized access through compromised keys. Regular key rotation aligns with best practices
                     for maintaining robust encryption, helping to ensure compliance with various data security
                     standards and regulations.
                     By frequently updating encryption keys, this setting helps proactively mitigate risks associated
                     with long-term key exposure and evolving cybersecurity threats, thereby maintaining the integrity
                     and confidentiality of your data in Snowflakeâ€™s cloud environment.
                     See: https://docs.snowflake.com/en/user-guide/security-encryption-manage#periodic-rekeying"""
    query = """SELECT
                 "key" AS "Key",
                 "value" AS "Value",
                 "default" AS "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'PERIODIC_DATA_REKEYING'
                 AND "value" = false;"""
    cache = show_parameters_in_account
    severity = MAJOR
    tags = [SECURITY, ENCRYPTION]
  }

  "Strong client-side encryption key" = {
    description = """A key size of 256 bits is used for Advanced Encryption Standard (AES) 256-bit encryption,
                     which is one of the most secure encryption methods available. Choosing a 256-bit key size
                     enhances the security of data handled within Snowflake, safeguarding it against potential
                     cryptographic attacks and meeting high standards for data privacy and compliance with various
                     security regulations.
                     See: https://docs.snowflake.com/en/sql-reference/parameters#client-encryption-key-size"""
    query = """SELECT
                 "key" as "Name",
                 "value" as "Value",
                 "default" as "Default"
               FROM
                 show_parameters_in_account
               WHERE
                 "key" = 'CLIENT_ENCRYPTION_KEY_SIZE'
                 AND "value" < 256;"""
    cache = show_parameters_in_account
    severity = MAJOR
    tags = [SECURITY, ENCRYPTION]
  }

  "Grants to USERADMIN" = {
    description = "The USERADMIN role should not be granted extra privileges."
    query = """SELECT
                 table_catalog AS "Database Name",
                 COUNT(*) AS "Grants Count"
               FROM
                 grants_to_roles
               WHERE
                 grantee_name = 'USERADMIN'
                 AND granted_by IS NOT NULL
                 AND privilege <> 'OWNERSHIP'
               GROUP BY
                 table_catalog
               ORDER BY
                 "Grants Count" DESC;"""
    severity = MAJOR
    cache = grants_to_roles
    tags = [SECURITY]
  }
  
  "Grants to SYSADMIN" = {
    description = "The SYSADMIN role should not be granted extra privileges."
    query = """SELECT
                 table_catalog AS "Database Name",
                 COUNT(*) AS "Grants Count"
               FROM
                 grants_to_roles
               WHERE
                 grantee_name = 'SYSADMIN'
                 AND granted_by IS NOT NULL
                 AND privilege <> 'OWNERSHIP'
               GROUP BY
                 table_catalog
               ORDER BY
                 "Grants Count" DESC;"""
    severity = MAJOR
    cache = grants_to_roles
    tags = [SECURITY]
  }

  "Grants to SECURITYADMIN" = {
    description = "The SECURITYADMIN role should not be granted extra privileges."
    query = """SELECT
                 table_catalog AS "Database Name",
                 COUNT(*) AS "Grants Count"
               FROM
                 grants_to_roles
               WHERE
                 grantee_name = 'SECURITYADMIN'
                 AND granted_by IS NOT NULL
                 AND privilege <> 'OWNERSHIP'
               GROUP BY
                 table_catalog
               ORDER BY
                 "Grants Count" DESC;"""
    severity = MAJOR
    cache = grants_to_roles
    tags = [SECURITY]
  }

  "Grants to PUBLIC" = {
    description = "The PUBLIC role should not be granted extra privileges."
    query = """SELECT
                 table_catalog AS "Database Name",
                 COUNT(*) AS "Grants Count"
               FROM
                 grants_to_roles
               WHERE
                 grantee_name = 'PUBLIC'
                 AND granted_by IS NOT NULL
                 AND privilege <> 'OWNERSHIP'
               GROUP BY
                 table_catalog
               ORDER BY
                 "Grants Count" DESC;"""
    severity = MAJOR
    cache = grants_to_roles
    tags = [SECURITY]
  }

  "Grants to ACCOUNTADMIN" = {
    description = "The ACCOUNTADMIN role should not be granted extra privileges."
    query = """SELECT
                 table_catalog AS "Database Name",
                 COUNT(*) AS "Grants Count"
               FROM
                 grants_to_roles
               WHERE
                 grantee_name = 'ACCOUNTADMIN'
                 AND granted_by IS NOT NULL
               GROUP BY
                 table_catalog
               ORDER BY
                 "Grants Count" DESC;"""
    severity = MAJOR
    cache = grants_to_roles
    tags = [SECURITY]
  }

  "ACCOUNTADMIN user count" = {
    description = "Verifies that 3 to 5 users are assigned as ACCOUNTADMIN."
    query = """SELECT
                 user_count AS "Users Granted ACCOUNTADMIN"
               FROM
                 (
                   SELECT
                     COUNT(*) AS user_count
                   FROM
                     grants_to_users
                   WHERE
                     role = 'ACCOUNTADMIN'
                     AND deleted_on IS NULL
                 ) AS user_count_query
               HAVING
                 user_count < 3
                 OR user_count > 5;"""
    severity = MAJOR
    cache = grants_to_users
    tags = [SECURITY]
  }
  
  "ACCOUNTADMIN query history" = {
    description = "ACCOUNTADMIN query history in the past {{ time_window_days }} days."
    query = """SELECT
                 LEFT(user_name, 3) || RPAD('*', LENGTH(user_name) - 3, '*') AS "User Name",
                 query_type AS "Query Type",
                 COUNT(*) AS "Count"
               FROM
                 query_history
               WHERE
                 role_name = 'ACCOUNTADMIN'
                 AND start_time > DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 user_name,
                 query_type
               ORDER BY
                 "Count" DESC;"""
    severity = INFO
    cache = query_history
    tags = [SECURITY]
  }

  "SECURITYADMIN query history" = {
    description = "SECURITYADMIN query history in the past {{ time_window_days }} days."
    query = """SELECT
                 LEFT(user_name, 3) || RPAD('*', LENGTH(user_name) - 3, '*') AS "User Name",
                 query_type AS "Query Type",
                 COUNT(*) AS "Count"
               FROM
                 query_history
               WHERE
                 role_name = 'SECURITYADMIN'
                 AND start_time > DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 user_name,
                 query_type
               ORDER BY
                 "Count" DESC;"""
    severity = INFO
    cache = query_history
    tags = [SECURITY]
  }

  "USERADMIN query history" = {
    description = "USERADMIN query history in the past {{ time_window_days }} days."
    query = """SELECT
                 LEFT(user_name, 3) || RPAD('*', LENGTH(user_name) - 3, '*') AS "User Name",
                 query_type AS "Query Type",
                 COUNT(*) AS "Count"
               FROM
                 query_history
               WHERE
                 role_name = 'USERADMIN'
                 AND start_time > DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 user_name,
                 query_type
               ORDER BY
                 "Count" DESC;"""
    severity = INFO
    cache = query_history
    tags = [SECURITY]
  }
  
  "SYSADMIN query history" = {
    description = "SYSADMIN query history in the past {{ time_window_days }} days."
    query = """SELECT
                 LEFT(user_name, 3) || RPAD('*', LENGTH(user_name) - 3, '*') AS "User Name",
                 query_type AS "Query Type",
                 COUNT(*) AS "Count"
               FROM
                 query_history
               WHERE
                 role_name = 'SYSADMIN'
                 AND start_time > DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
               GROUP BY
                 user_name,
                 query_type
               ORDER BY
                 "Count" DESC;"""
    severity = INFO
    cache = query_history
    tags = [SECURITY]
    graph = {
      title = "SYSADMIN query history",
      type =  "bar",
      x = {
        field = "User Name"
        type = "ordinal"
        labels = "true"
      },
      y = {
        field = "Count",
        type = "quantitative",
        labels = "true"
      },
    }
  }

  "Schemas not using managed access" = {
    description = """Managed access schemas improve security by locking down privilege management on objects.
                     See: https://docs.snowflake.com/en/user-guide/security-access-control-configure#creating-managed-access-schemas"""
    query = """SELECT
                 catalog_name AS "Database Name",
                 LISTAGG(schema_name, ', ') WITHIN GROUP (
                   ORDER BY
                     schema_name
                 ) AS "Schemas Not Using Managed Access"
               FROM
                 snowflake.account_usage.schemata
               WHERE
                 is_managed_access = 'NO'
                 AND deleted IS NULL
               GROUP BY
                 catalog_name;"""
    severity = INFO
    tags = [SECURITY]
  }

  "Account parameter CLIENT_SESSION_KEEP_ALIVE" = {
      description = """Account parameter CLIENT_SESSION_KEEP_ALIVE should be set to 'false' so that users must log in again after four hours of inactivity. If it is true, an inactive session will stay active indefinitely.
                       See: https://docs.snowflake.com/en/sql-reference/parameters#client-session-keep-alive"""
      query = """SELECT
                   *
                 FROM
                   show_parameters_in_account
                 WHERE
                   "key" = 'CLIENT_SESSION_KEEP_ALIVE'
                   AND "value" = true;"""
      severity = MAJOR
      tags = [SECURITY, ACCOUNT]
      cache = show_parameters_in_account
    }
  
  "Integration changes" = {
      description = """Integrations that have been created or altered in the past {{ time_window_days }} days."""
      query = """SELECT
                   start_time AS "Start Time",
                   query_type AS "Query Type",
                   query_id AS "Query ID",
                   CASE
                     WHEN query_text ILIKE '%API INTEGRATION%' THEN 'API INTEGRATION'
                     WHEN query_text ILIKE '%CATALOG INTEGRATION%' THEN 'CATALOG INTEGRATION'
                     WHEN query_text ILIKE '%EXTERNAL ACCESS INTEGRATION%' THEN 'EXTERNAL ACCESS INTEGRATION'
                     WHEN query_text ILIKE '%NOTIFICATION INTEGRATION%' THEN 'NOTIFICATION INTEGRATION'
                     WHEN query_text ILIKE '%STORAGE INTEGRATION%' THEN 'STORAGE INTEGRATION'
                     WHEN query_text ILIKE '%SECURITY INTEGRATION%' THEN 'SECURITY INTEGRATION'
                     ELSE 'Other'
                   END AS "Integration Type"
                 FROM
                   query_history
                 WHERE
                   start_time > DATEADD('DAY', - {{ time_window_days }}, CURRENT_TIMESTAMP())
                   AND execution_status = 'SUCCESS'
                   AND query_type IN ('CREATE', 'ALTER')
                   AND (
                     query_text ILIKE '%API INTEGRATION%'
                     OR query_text ILIKE '%CATALOG INTEGRATION%'
                     OR query_text ILIKE '%EXTERNAL ACCESS INTEGRATION%'
                     OR query_text ILIKE '%NOTIFICATION INTEGRATION%'
                     OR query_text ILIKE '%STORAGE INTEGRATION%'
                     OR query_text ILIKE '%SECURITY INTEGRATION%'
                   );"""
      severity = INFO
      cache = query_history
      tags = [SECURITY]
    }
  
  "Public key rotation" = {
      description = """Number of days since the public key has been rotated for the users. It is a good security practice to rotate public keys periodically in case the private key has been compromised."""
      query = """WITH PublicKeyInfo AS (
                    SELECT
                        MAX(end_time) AS time,
                        REGEXP_SUBSTR(query_text, '((\\sUSER\\sIF\\sNOT\\sEXISTS\\s)|(\\sUSER\\sIF\\sEXISTS\\s)|(\\sUSER\\s))(\\w+)\\s', 1, 1, 'i', 5) AS user
                    FROM
                        query_history
                    WHERE
                        execution_status = 'SUCCESS' AND
                        query_type IN ('CREATE_USER', 'ALTER_USER') AND
                        query_text ILIKE '%RSA_PUBLIC_KEY%'
                    GROUP BY
                        user
                    )
                    SELECT
                        LEFT(u.name, 3) || RPAD('*', LENGTH(u.name) - 3, '*') AS "Username",
                        CASE
                            WHEN DATEDIFF('DAY', p.time, CURRENT_DATE()) IS NULL THEN '> 365'
                            ELSE TO_VARCHAR(DATEDIFF('day', p.time, CURRENT_DATE()))
                        END AS "Days since last set"
                    FROM
                        snowflake.account_usage.users u
                    LEFT JOIN
                        PublicKeyInfo p ON UPPER(u.name) = UPPER(p.user)
                    WHERE
                        u.deleted_on is NULL AND
                        u.has_rsa_public_key = true
                    ORDER BY
                        COALESCE(p.time, TO_DATE('1000-01-01', 'YYYY-MM-DD'));"""
      severity = INFO
      cache = query_history
      tags = [SECURITY]
    }
}
