account:
  resourceMonitor: account_resource_monitor
  sessionPolicy: GOVERNANCE.POLICY.ACCOUNT_SESSION_POLICY
  passwordPolicy: GOVERNANCE.POLICY.ACCOUNT_PASSWORD_POLICY
  authenticationPolicy: GOVERNANCE.POLICY.ACCOUNT_AUTHENTICATION_POLICY
  tags:
    governance.tag.environment: dev
  parameters:
    # assign a network policy to the account, allowing/blocking access based on network rules
    network_policy: ACCOUNT_NETWORK_POLICY
    # abort queries where the connection is lost due to abrupt session termination
    abort_detached_query: true
    # allow clients to cache MFA tokens to prevent multiple MFA prompts when using multiple connections
    allow_client_mfa_caching: true
    # allow clients to cache ID tokens to prevent multiple browser prompts when using SSO with multiple connections
    allow_id_token: true
    # prevent logging value bound in prepared statements since they may be sensitive
    client_enable_log_info_statement_parameters: false
    # prevent nondeterministic MERGE statements
    error_on_nondeterministic_merge: true
    # prevent nondeterministic UPDATE statements
    error_on_nondeterministic_update: true
    # terminate statements that are queued longer than this timeout
    statement_queued_timeout_in_seconds: 3600 # 1 hour
    # terminate statements that execute longer than this timeout
    statement_timeout_in_seconds: 21600 # 6 hours
    # set the default session time zone to UTC
    timezone: UTC
    # abort transactions automatically on error
    transaction_abort_on_error: true
    # do not redact queries that fail due to a syntax error to facilitate debugging
    enable_unredacted_query_syntax_error: true
    # periodically re-encrypt table data with new keys CIS-4.1
    periodic_data_rekeying: true
    # use 256 bit keys when encrypting data with Snowflake clients CIS-4.2
    client_encryption_key_size: 256
    # set the default data retention on objects that support time travel, CIS-4.3
    data_retention_time_in_days: 7
    # enforce a minimum data retention period on objects that support time travel, CIS-4.4
    min_data_retention_time_in_days: 7
    # maximum time to extend data retention for tables to prevent streams from becoming stale
    max_data_extension_time_in_days: 14
    # require a storage integration to create a stage, CIS-4.5
    require_storage_integration_for_stage_creation: true
    # require a storage integration to operate a stage, CIS-4.6
    require_storage_integration_for_stage_operation: true
    # prevent COPY INTO statements from unloading data to an inline URL, CIS-4.8
    prevent_unload_to_inline_url: true

resourceMonitors:
  - name: account_resource_monitor
    creditQuota: 500
    startTimestamp: immediately
    frequency: monthly
    notifyUsers:
      # todo: this user needs a verified email
      - admin
    triggers:
      - threshold: 50
        action: notify
      - threshold: 75
        action: notify
      - threshold: 90
        action: notify
      - threshold: 100
        action: notify

databases:
  - name: governance

schemas:
  - name: policy
    database: governance
  - name: tag
    database: governance

roles:
  - name: tag_admin
  - name: policy_admin
  - name: log_admin

roleGrants:
  - name: tag_admin
    toRoles:
      - sysadmin
    toUsers:
      - {{ provision_user }}
  - name: policy_admin
    toRoles:
      - sysadmin
    toUsers:
      - {{ provision_user }}

privilegeGrants:
  - privilege: modify log level
    objectType: account
    roleName: log_admin
  # privilege grants to the TAG_ADMIN role to manage tags
  - privilege: usage
    objectType: database
    objectName: governance
    roleName: tag_admin
  - privilege: usage
    objectType: schema
    objectName: governance.tag
    roleName: tag_admin
  - privilege: create tag
    objectType: schema
    objectName: governance.tag
    roleName: tag_admin
  # privilege grants to the POLICY_ADMIN role to manage policies
  - privilege: usage
    objectType: database
    objectName: governance
    roleName: policy_admin
  - privilege: usage
    objectType: schema
    objectName: governance.policy
    roleName: policy_admin
  - privilege: create password policy
    objectType: schema
    objectName: governance.policy
    roleName: policy_admin
  - privilege: apply password policy
    objectType: account
    objectName: ""
    roleName: policy_admin
  - privilege: create session policy
    objectType: schema
    objectName: governance.policy
    roleName: policy_admin
  - privilege: apply session policy
    objectType: account
    objectName: ""
    roleName: policy_admin
  - privilege: create network policy
    objectType: account
    objectName: ""
    roleName: policy_admin

networkRules:
  - database: governance
    schema: policy
    name: allow_public_access
    ruleType: IPV4
    mode: ingress
    valueList:
      - 0.0.0.0/0
    properties:
      comment: Allow public internet access

networkPolicies:
  - name: account_network_policy
    allowedNetworkRules:
      - GOVERNANCE.POLICY.ALLOW_PUBLIC_ACCESS
    properties:
      comment: The account network policy

sessionPolicies:
  - database: governance
    schema: policy
    name: account_session_policy
    properties:
      session_idle_timeout_mins: 10 # CIS-1.9
      session_ui_idle_timeout_mins: 10
      comment: The account session policy

passwordPolicies:
  - database: governance
    schema: policy
    name: account_password_policy
    properties:
      password_min_length: 14 # CIS-1.5
      password_max_length: 24
      password_min_upper_case_chars: 1
      password_min_lower_case_chars: 1
      password_min_numeric_chars: 1
      password_min_special_chars: 1
      password_max_retries: 5
      password_lockout_time_mins: 30
      comment: The account password policy

authenticationPolicies:
  # todo: is this a good default authentication policy?
  - database: governance
    schema: policy
    name: account_authentication_policy
    properties:
      authentication_methods:
        - saml
        - oauth
      client_types:
        - snowflake_ui
        - snowsql
        - drivers
      mfa_enrollment: required
      # todo: ideally you would lock this down to specific security integrations
#      security_integrations:
#        - 'your-scim-integration'

  # apply to break-glass user
  - database: governance
    schema: policy
    name: breakglass_authentication_policy
    properties:
      authentication_methods:
        - password
      client_types:
        - snowflake_ui

  # apply to service accounts
  - database: governance
    schema: policy
    name: service_authentication_policy
    properties:
      authentication_methods:
        - keypair
        - oauth
      client_types:
        - drivers
        - snowsql

tags:
  - name: environment
    database: governance
    schema: tag
    allowedValues:
      - dev
      - qa
      - prod
    properties:
      comment: Tag to indicate which environment an object is associated with
  - name: data_classification
    database: governance
    schema: tag
    allowedValues:
      - PII
      - PCI
      - PHI
    properties:
      comment: A tag to indicate if the data contained by the object belongs to a sensitive classification
