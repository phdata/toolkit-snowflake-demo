sourceType: snowflake
tables:
  - name: customer
    database: synthetic_sales
    schema: main
    # generate 10..50 customers for every product row
    rowGenerator:
      range: 10..20
    columns:
      - name: id
        provider: NumberSequence
        primaryKey: true
        dataType: INTEGER
        transform:
          # this references allows us to use rowGenerator to generate 3-5 customer rows for each product row
          references:
            x: synthetic_sales.main.product.id
          function: self
      - name: first_name
        nullable: true
        provider: FirstName
        dataType: TEXT
        # first name is about 75% populated
        density: 0.75
      - name: last_name
        provider: LastName
        dataType: TEXT
      # composite Address provider so that state and zip are coordinated for each row
      - name: state
        provider: Address.state
        nullable: true
        dataType: TEXT
      - name: zip_code
        provider: Address.zip
        nullable: true
        dataType: TEXT
  - name: order_history
    database: synthetic_sales
    schema: main
    rowGenerator:
      # some customers and products may not have any orders when we generate 0 orders
      range: 0..25
      # there are more customers than products, so we need to enable fill to reuse products across the multiple customer rows
      fill: true
      # skew orders per product and customer towards the low end of 0..5
      sampler:
        type: gaussian
        skew: -1.0
    columns:
      - name: id
        provider: NumberSequence
        nullable: true
        dataType: INTEGER
      - name: product_id
        # foreign key to product table that is joinable
        foreignKey: synthetic_sales.main.product.id
      - name: customer_id
        # foreign key to customer table that is joinable
        foreignKey: synthetic_sales.main.customer.id
      - name: sale_timestamp
        dataType: TIMESTAMP
        transform:
          references:
            launch: synthetic_sales.main.product.launch_timestamp
            discontinued: synthetic_sales.main.product.discontinued_timestamp
          function: |
            // use now() as the end of the range if product is not discontinued
            end = coalesce(discontinued, now());
            // make sale between the product launch and end timestamps
            sale = timestampBetween(launch, end);

            // force ~10% of all sales not in December to December to show increased sales
            if (month(sale) != 12 && randomDouble() <= 0.1) {
              // update the sale to be in December between the 1st and 24th
              decemberSale = setDay(setMonth(sale, 12), randomInt(1, 25));

              // check is the updated December date is still between product launch and discontinued
              if (launch <= decemberSale && decemberSale <= end) {
                // the December sale is between launch and end, so use it
                decemberSale;
              } else {
                // use the original sale instead of the December sale since it is outside product launch and discontinued
                sale;
              }
            } else {
              // use the sale date without forcing it to December
              sale;
            }
      - name: return_timestamp
        dataType: TIMESTAMP
        nullable: true
        transform:
          references:
            sale: sale_timestamp
            state: synthetic_sales.main.customer.state
          function: |
            if (month(sale) == 12) {
              // returns during December are significantly higher than normal
              if (randomDouble() < 0.5) {
                addDays(sale, randomInt(10, 30));
              }
            } else if (state.toLowerCase().startsWith("m")) {
              // customers from states that start with an "m" have a ~30% return rate
              if (randomDouble() < 0.3) {
                // returns happen within a month of sale
                addDays(sale, randomInt(1, 31));
              }
            } else {
              // all other customers have a 5% return rate
              if (randomDouble() < 0.05) {
                // returns happen within a month of sale
                addDays(sale, randomInt(1, 31));
              }
            }
  - name: product
    database: synthetic_sales
    schema: main
    rows: 50
    columns:
      - name: id
        provider: NumberSequence
        primaryKey: true
        dataType: INTEGER
      - name: name
        provider: ProductName
        dataType: TEXT
      - name: description
        provider: CatchPhrase
        dataType: TEXT
      - name: category
        provider: Department
        dataType: TEXT
      - name: launch_timestamp
        dataType: TIMESTAMP
        provider: RandomTimestamp
        config:
          min: 1990-01-01T00:00:00Z
      - name: discontinued_timestamp
        nullable: true
        dataType: TIMESTAMP
        transform:
          references:
            launch: launch_timestamp
          function: |
            if (year(launch) <= 2000) {
              // products from 2000 and earlier are all discontinued now
              addDays(addYears(launch, randomInt(3, 7)), randomInt(1, 300));
            } else if (randomDouble() < 0.05) {
              // 5% chance that a product has been discontinued less than a year after launch
              addDays(launch, randomInt(180, 350));
            } else {
              // not discontinued!
              null;
            }
      - name: cost
        provider: RandomNumber
        dataType: NUMBER
        precision: 6
        scale: 2
        # skew price toward the lower end of the range allowed with a precision of 6
        config:
          sampler:
            type: gaussian
            skew: -2.0
      - name: price
        nullable: true
        dataType: NUMBER
        precision: 7
        scale: 2
        transform:
          references:
            cost: cost
          function: |
            // sell price is some multiple of the cost, sometimes even less than cost
            cost * randomDouble(0.9, 3.0);
